<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RszTool.App.Views"
                    xmlns:viewmodels="clr-namespace:RszTool.App.ViewModels"
                    xmlns:rsztool="clr-namespace:RszTool;assembly=RszTool">

    <viewmodels:RszInstanceToFieldViewModels x:Key="RszInstanceToFieldViewModels"/>

    <HierarchicalDataTemplate DataType="{x:Type rsztool:RszInstance}" ItemsSource="{Binding ., Converter={StaticResource RszInstanceToFieldViewModels}}">
        <TextBlock Text="{Binding Path=Name}"/>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:BaseRszFieldViewModel}" ItemsSource="{Binding Path=Value}">
        <TextBlock Text="{Binding Path=Name}"/>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:BaseRszFieldArrayItemViewModel}" ItemsSource="{Binding Path=Value}">
        <TextBlock Text="{Binding Path=Name}" Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType=UserControl}}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="_Copy" Command="{Binding PlacementTarget.Tag.CopyArrayItem, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Remove" Command="{Binding PlacementTarget.Tag.RemoveArrayItem, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Duplicate" Command="{Binding PlacementTarget.Tag.DuplicateArrayItem, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:BaseTreeItemViewModel}" ItemsSource="{Binding Path=Items}">
        <TextBlock Text="{Binding Path=Name}"/>
    </HierarchicalDataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:RszFieldNormalViewModel}">
        <local:FieldValueEdit DataContext="{Binding}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:RszFieldArrayNormalItemViewModel}">
        <local:FieldValueEdit DataContext="{Binding}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:ClassPropertyViewModel}">
        <local:ClassPropertyEdit DataContext="{Binding}" />
    </DataTemplate>

    <!--<Style TargetType="TreeViewItem" x:Key="TreeViewItemStyle">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
        </Style.Resources>
    </Style>-->

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                    Width="15"
                    Height="13"
                    Background="Transparent">
                        <Path
                        x:Name="ExpandPath"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Margin="1,1,1,1"
                        Fill="#333"
                        Data="M 4 0 L 8 4 L 4 8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 4 L 8 4 L 4 8 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TreeViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                  Grid.Row="0"
                                  Grid.Column="0"
                                  IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                  ClickMode="Press"/>

                        <Border x:Name="Bd"
                            Grid.Row="0"
                            Grid.Column="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0,2,0,2">
                            <ContentPresenter x:Name="PART_Header"
                                ContentSource="Header"
                                HorizontalAlignment="Stretch" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                Grid.Row="1"
                                Grid.Column="1"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TreeViewItem" x:Key="TreeViewItemHideIfEmpty">
        <!-- skip effect children -->
        <Setter Property="ItemContainerStyle" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
